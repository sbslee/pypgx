mutate(percent = n/sum(n)*100)
group_by(atypical_burden_phenotypes_counts, unique(Population)) %>%
mutate(percent = n/sum(n)*100)
View(atypical_burden_phenotypes)
group_by(atypical_burden_phenotypes_counts, Population) %>%
mutate(percent = n/sum(n)*100)
View(burden_phenotypes_plot)
View(burden_phenotypes_plot)
View(atypical_burden_phenotypes_counts)
atypical_burden_phenotypes_counts %>% group_by(Population, num_atypical_true) %>%
mutate(percent = n/sum(n)*100)
group_by(atypical_burden_phenotypes_counts, Population) %>%
transmute(num_atypical_true, percent = n/sum(n)*100)
atypical_burden_phenotypes_counts = atypical_burden_phenotypes %>%
group_by(Population,num_atypical_true) %>%
tally()
burden_phenotypes_plot = group_by(atypical_burden_phenotypes_counts, Population) %>%
transmute(num_atypical_true, percent = n/sum(n)*100)
View(burden_phenotypes_plot)
colnames(burden_phenotypes_plot) = c("Population","Gene_Burden","Count","Percentage")
colnames(burden_phenotypes_plot) = c("Population","Gene_Burden","Percentage")
#Removing the 1kgp
burden_phenotypes_plot = burden_phenotypes_plot %>% filter(Population != "EUR,AFR")
# The palette with grey:
# cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
# "#F0E442"
#changing the order of color palette
cbPalette <- c("#999999", "#D55E00", "#E69F00", "#009E73", "#0072B2",  "#CC79A7")
burden_plot = ggplot(burden_phenotypes_plot, aes(fill=Population, y=Percentage, x=Gene_Burden)) +
geom_bar(position="dodge", stat="identity")+
labs(title = "Number of PGx genes with atypical Phenotypes - 'abnormal, priority, and high risk' - as determined by CPIC",
x = "Number of PGx genes",
y = "Percent of subjects %")+
theme_classic(base_size = 25) +
# To use for fills, add
scale_fill_manual(values=cbPalette,
name = "Populations", labels = c("African","American","East Asian","European","South Asian"))
burden_plot
knitr::opts_chunk$set(echo = TRUE)
phenotypes <- read.csv("/Phenotype Frequencies/SupplementaryTable4_PhenotypeFrequencies.csv")
library(xlsx)
library(plyr)
library(dplyr)
library(tidyr)
library(writexl)
library(stringr)
library(ggplot2)
library(readxl)
library(readr)
library(tidyverse)
library(openxlsx)
phenotypes <- read.csv("/Phenotype Frequencies/SupplementaryTable4_PhenotypeFrequencies.csv")
phenotypes <- read.csv("Phenotype Frequencies/SupplementaryTable4_PhenotypeFrequencies.csv")
phenotypes <- read.csv("Phenotype Frequencies/SupplementaryTable4_PhenotypeFrequencies.csv")
#Genes available from PharmGKB with allele and phenotype frequencies: https://www.pharmgkb.org/page/pgxGeneRef
genes = c("CYP2B6","CYP2C9","CYP2C19","CYP2D6","CYP3A5","DPYD","NUDT15","TPMT","UGT1A1","ABCG2","SLCO1B1")
phenotypes = phenotypes[phenotypes$Gene %in% genes,]
pheno_gene = phenotypes %>%
group_split(Gene)
names(pheno_gene) = unique(phenotypes$Gene)
View(pheno_gene)
View(pheno_gene[["ABCG2"]])
phenotypes %>% group_by(Gene, Phenotype) %>% count()
View(pheno_gene)
pchisq(29.71679, df = 1, ncp = 890*(x/100)/(1-(x/100)), lower = F)
pchisq(29.71679, df = 1, ncp = 890*(1/100)/(1-(1/100)), lower = F)
pchisq(29.71679, df = 1, ncp = 5185*(50/100)/(1-(50/100)), lower = F)
pchisq(29.71679, df = 1, ncp = 5185*(.50/100)/(1-(.50/100)), lower = F)
pchisq(29.71679, df = 1, ncp = 5185*(.57/100)/(1-(.57/100)), lower = F)
pchisq(29.71679, df = 1, ncp = 820*(.65/100)/(1-(.65/100)), lower = F)
pchisq(29.71679, df = 1, ncp = 1540*(.65/100)/(1-(.65/100)), lower = F)
pchisq(29.71679, df = 1, ncp = 1540*(.8/100)/(1-(.8/100)), lower = F)
View(pheno_gene)
View(phenotypes)
View(pheno_gene)
View(pheno_gene[["ABCG2"]])
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(dplyr)
library(tidyr)
library(readxl)
Alleles <- read_excel("Haplotype Variation Patterns - Lit/SupplementaryTable3_AlleleFrequencies.xlsx")
Alleles = Alleles[,-3]
#Available from literature (PharmGKB)
genes_lit = c("CYP2D6","CYP2B6","CYP2C9","CYP2C19","DPYD","G6PD","SLCO1B1","TPMT")
Alleles = Alleles[Alleles$Gene %in% genes_lit,]
allele_gene = Alleles %>%
group_split(Gene)
names(allele_gene) = unique(Alleles$Gene)
CYP2B6_lit = read_excel("Haplotype Variation Patterns - Lit/CYP2B6_frequency_table.xlsx", sheet = 2)
CYP2B6_and_lit = merge(allele_gene[["CYP2B6"]], CYP2B6_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR")
CYP2B6_and_lit = CYP2B6_and_lit[, col_order]
CYP2B6_and_lit_na_rm = na.omit(CYP2B6_and_lit)
CYP2C9_lit = read_excel("Haplotype Variation Patterns - Lit/CYP2C9_frequency_table.xlsx", sheet = 2)
CYP2C9_and_lit = merge(allele_gene[["CYP2C9"]], CYP2C9_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR","AMR_lit")
CYP2C9_and_lit = CYP2C9_and_lit[, col_order]
CYP2C9_and_lit_na_rm = na.omit(CYP2C9_and_lit)
CYP2C19_lit = read_excel("Haplotype Variation Patterns - Lit/CYP2C19_frequency_table.xlsx", sheet = 2)
CYP2C19_and_lit = merge(allele_gene[["CYP2C19"]], CYP2C19_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR","AMR_lit")
CYP2C19_and_lit = CYP2C19_and_lit[, col_order]
CYP2C19_and_lit_na_rm = na.omit(CYP2C19_and_lit)
CYP2D6_lit = read_excel("Haplotype Variation Patterns - Lit/CYP2D6_frequency_table.xlsx", sheet = 2)
CYP2D6_and_lit = merge(allele_gene[["CYP2D6"]], CYP2D6_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR","AMR_lit")
CYP2D6_and_lit = CYP2D6_and_lit[, col_order]
CYP2D6_and_lit_na_rm = na.omit(CYP2D6_and_lit)
DPYD_lit = read_excel("Haplotype Variation Patterns - Lit/DPYD_frequency_table.xlsx", sheet = 2)
DPYD_and_lit = merge(allele_gene[["DPYD"]], DPYD_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR")
DPYD_and_lit = DPYD_and_lit[, col_order]
DPYD_and_lit_na_rm = na.omit(DPYD_and_lit)
G6PD_lit = read_excel("Haplotype Variation Patterns - Lit/G6PD_frequency_table.xlsx", sheet = 2)
G6PD_and_lit = merge(allele_gene[["G6PD"]], G6PD_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AMR","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit")
G6PD_and_lit = G6PD_and_lit[, col_order]
G6PD_and_lit_na_rm = na.omit(G6PD_and_lit)
#write.xlsx(G6PD_and_lit_na_rm, file = 'G6PD_Redo_20230203_NA_rm.xlsx')
SLCO1B1_lit = read_excel("Haplotype Variation Patterns - Lit/SLCO1B1_frequency_table.xlsx", sheet = 2)
SLCO1B1_and_lit = merge(allele_gene[["SLCO1B1"]], SLCO1B1_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR","AMR_lit")
SLCO1B1_and_lit = SLCO1B1_and_lit[, col_order]
SLCO1B1_and_lit_na_rm = na.omit(SLCO1B1_and_lit)
TPMT_lit = read_excel("Haplotype Variation Patterns - Lit/TPMT_frequency_table.xlsx", sheet = 2)
TPMT_and_lit = merge(allele_gene[["TPMT"]], TPMT_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR")
TPMT_and_lit = TPMT_and_lit[, col_order]
TPMT_and_lit_na_rm = na.omit(TPMT_and_lit)
dataset_names <- list('CYP2B6' = CYP2B6_and_lit, 'CYP2C19' = CYP2C19_and_lit, 'CYP2C9' = CYP2C9_and_lit, 'CYP2D6' = CYP2D6_and_lit, 'DPYD' = DPYD_and_lit, 'G6PD' = G6PD_and_lit, 'SLCO1B1' = SLCO1B1_and_lit, 'TPMT' = TPMT_and_lit)
#write.xlsx(dataset_names, file = 'Haplotype_Frequencies_8_genes_20230124_NA_rm.xlsx')
dataset_names_na <- list('CYP2B6' = CYP2B6_and_lit_na_rm, 'CYP2C19' = CYP2C19_and_lit_na_rm, 'CYP2C9' = CYP2C9_and_lit_na_rm, 'CYP2D6' = CYP2D6_and_lit_na_rm, 'DPYD' = DPYD_and_lit_na_rm, 'G6PD' = G6PD_and_lit_na_rm, 'SLCO1B1' = SLCO1B1_and_lit_na_rm, 'TPMT' = TPMT_and_lit_na_rm)
#write.xlsx(dataset_names_na, file = 'Haplotype_Frequencies_8_genes_20230203_NA_rm.xlsx')
sessionInfo()
View(dataset_names)
View(dataset_names[["CYP2B6"]])
knitr::opts_chunk$set(echo = TRUE)
#Libraries
library(data.table)
library(dplyr)
library(readr)
library(xlsx)
cadd30_variants <- read_csv("C:/Users/shermcar/Dropbox/PGx Collaboration/Data Analysis/SNVs and indels/cadd30-variants.csv")
knitr::opts_chunk$set(echo = TRUE)
#Libraries
library(data.table)
library(dplyr)
library(readr)
library(xlsx)
cadd30_variants <- read_csv("C:/Users/shermcar/Dropbox/PGx Collaboration/Data Analysis/SNVs and indels/cadd30-variants.csv")
knitr::opts_chunk$set(echo = TRUE)
#Libraries
library(data.table)
library(dplyr)
library(readr)
library(xlsx)
# cadd30_variants <- read_csv("C:/Users/shermcar/Dropbox/PGx Collaboration/Data Analysis/SNVs and indels/cadd30-variants.csv")
cadd30_variants <- read_csv("SNVs and indels/cadd30-variants.csv")
# #look at the count of genes
# counts_gene = cadd30_variants %>%
#   count(GeneName) %>%
#   arrange(desc(.))
#Import Dataset
# cadd_vep = fread("C:\\Users\\shermcar\\Dropbox\\PGx Collaboration\\Data Analysis\\SNVs and indels\\Ensembl_VEP/VEP_appropriate_format_20230215.txt")
cadd_vep = fread("C:\\Users\\shermcar\\Dropbox\\PGx Collaboration\\Data Analysis\\SNVs and indels\\Ensembl_VEP/VEP_appropriate_format_20230215.txt")
pathogenic = c("Pathogenic/Likely_pathogenic","Pathogenic","drug_response")
cadd_vep_patho = filter(cadd_vep, clinvar_clnsig %in% pathogenic)
View(cadd_vep)
View(cadd_vep)
View(cadd30_variants)
knitr::opts_chunk$set(echo = TRUE)
#Libraries
library(data.table)
library(dplyr)
library(readr)
library(xlsx)
# cadd30_variants <- read_csv("C:/Users/shermcar/Dropbox/PGx Collaboration/Data Analysis/SNVs and indels/cadd30-variants.csv")
cadd30_variants <- read_csv("SNVs and indels/cadd30-variants.csv")
# #look at the count of genes
# counts_gene = cadd30_variants %>%
#   count(GeneName) %>%
#   arrange(desc(.))
#Import Dataset
# cadd_vep = fread("C:\\Users\\shermcar\\Dropbox\\PGx Collaboration\\Data Analysis\\SNVs and indels\\Ensembl_VEP/VEP_appropriate_format_20230215.txt")
# cadd_vep = fread("C:\\Users\\shermcar\\Dropbox\\PGx Collaboration\\Data Analysis\\SNVs and indels\\Ensembl_VEP/VEP_appropriate_format_20230215.txt")
cadd_vep = fread("SNVs and indels/Ensembl_VEP/VEP_appropriate_format_20230215.txt")
pathogenic = c("Pathogenic/Likely_pathogenic","Pathogenic","drug_response")
cadd_vep_patho = filter(cadd_vep, clinvar_clnsig %in% pathogenic)
#Potential Variants to keep in mind
unique_patho_variants = unique(cadd_vep_patho$`#Uploaded_variation`)
# [1] "19_38987106_C/T" "19_39014567_C/T" "2_38298167_G/A"  "22_42523528_C/T" "3_14199648_G/A"
# [6] "7_87175304_G/A"  "7_117188877_G/T" "7_117227865_C/T"
cadd_vep_patho = cadd_vep %>%
filter(`#Uploaded_variation` %in% unique_patho_variants)
cadd_vep_patho = cadd_vep_patho %>%
relocate(SYMBOL, .after = `#Uploaded_variation`) %>%
relocate(clinvar_clnsig, .before = SYMBOL) %>%
relocate(Existing_variation, .before = SYMBOL)
# cadd_vep_patho %>%
#   filter(STRAND == 1)
#write.xlsx(cadd_vep_patho, "cadd_vep_pathogenic_20230221.xlsx")
#unique locations to find RS ids
# 1] "19:38987106-38987106"  "19:39014567-39014567"  "2:38298167-38298167"   "22:42523528-42523528"
# [5] "3:14199648-14199648"   "7:87175304-87175304"   "7:117188877-117188877" "7:117227865-117227865"
#RS ids
#rs200563280
indels_vep = fread("C:/Users/shermcar/Dropbox/PGx Collaboration/Data Analysis/SNVs and indels/Ensembl_VEP/Indels_20230227.txt")
#location: chr:start-end
indels = read_excel("C:/Users/shermcar/Dropbox/PGx Collaboration/Data Analysis/SNVs and indels/Ensembl_VEP/cadd30_indels_20230227.xlsx")
View(cadd_vep_patho)
View(cadd_vep_patho)
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(dplyr)
library(plyr)
library(tidyr)
library(writexl)
library(stringr)
library(ggplot2)
library(readxl)
library(readr)
#list of the genotypes and phenotypes of the 1KGP individuals - output from Stargazer
geno = read_csv("Burden Phenotype/genotype_phenotype_combined.csv") %>%  mutate_all(na_if,"")
#each of the genes, unique, there are 58
genes = unique(geno$Gene)
#list of genes for burden
gene_pheno = read_excel("Burden Phenotype/Table_Gene_Phenotypes_Steven_Github_20220902_CS.xlsx", sheet = 1)
#filtering to only look at the abnormal/priority/high risk
gene_pheno = gene_pheno %>% filter(Priority == "Abnormal/Priority/High Risk") %>%
unite("Gene_Pheno", Gene:Phenotype, remove = FALSE)
#Putting info into a table to use as supp of the list of genes and phenotypes we used for filtering
#write.xlsx(gene_pheno, "gene_phenotype_abnormal_high_risk_filter_20220914.xlsx")
#creating a list of genes to use for filtering
nontypical_genes = unique(gene_pheno$Gene)
#subset data based on the unique genes in CPIC: 13 of them, filtered out 3: CFTR, F5, and IFNL3 since the priority was listed as none
all_dat_nontypical = subset(geno, geno$Gene %in% nontypical_genes)
#making a matching column in all individual data
all_dat_nontypical = all_dat_nontypical %>%
unite("Gene_Pheno", c(Gene,Phenotype), remove = FALSE)
#get 13 CPIC genes per individual = 13 x 2504
all_dat_nontypical_indivi = split(all_dat_nontypical, all_dat_nontypical$Sample)
#create a list of genotype-phenotype combinations to look for in our participants
nontypical_sep_conditions = gene_pheno$Gene_Pheno
atypical_burden_phenotypes = data.frame() #columns, superpopulation.code, number of atypical
#getting the number of non-typical phenotypes, and phenotypes have a 1:1 relationship in this instance, so could help us to identify the number of genes that have atypical responses
for (i in 1:length(all_dat_nontypical_indivi)){
#i = 5
num_atypical = sum(all_dat_nontypical_indivi[[i]]$Gene_Pheno %in% nontypical_sep_conditions)
num_atypical_true = as.numeric(num_atypical)
Population = unique(all_dat_nontypical_indivi[[i]]$`Superpopulation code`)
indiv_pop_count = cbind(Population, num_atypical_true)
atypical_burden_phenotypes = rbind(atypical_burden_phenotypes, indiv_pop_count)
}
atypical_burden_phenotypes[is.na(atypical_burden_phenotypes)]= 0
atypical_burden_phenotypes_counts = atypical_burden_phenotypes %>%
group_by(Population,num_atypical_true) %>%
tally()
burden_phenotypes_plot = group_by(atypical_burden_phenotypes_counts, Population) %>%
transmute(num_atypical_true, percent = n/sum(n)*100)
colnames(burden_phenotypes_plot) = c("Population","Gene_Burden","Percentage")
#Removing the 1kgp
burden_phenotypes_plot = burden_phenotypes_plot %>% filter(Population != "EUR,AFR")
# The palette with grey:
# cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
# "#F0E442"
#changing the order of color palette
cbPalette <- c("#999999", "#D55E00", "#E69F00", "#009E73", "#0072B2",  "#CC79A7")
burden_plot = ggplot(burden_phenotypes_plot, aes(fill=Population, y=Percentage, x=Gene_Burden)) +
geom_bar(position="dodge", stat="identity")+
labs(title = "Number of PGx genes with atypical Phenotypes - 'abnormal, priority, and high risk' - as determined by CPIC",
x = "Number of PGx genes",
y = "Percent of subjects %")+
theme_classic(base_size = 25) +
# To use for fills, add
scale_fill_manual(values=cbPalette,
name = "Populations", labels = c("African","American","East Asian","European","South Asian"))
burden_plot
sessionInfo()
View(atypical_burden_phenotypes)
View(all_dat_nontypical)
View(atypical_burden_phenotypes)
View(all_dat_nontypical_indivi)
View(all_dat_nontypical_indivi[["HG00096"]])
View(atypical_burden_phenotypes)
View(all_dat_nontypical_indivi)
View(all_dat_nontypical_indivi[["HG00096"]])
View(all_dat_nontypical_indivi[["HG02595"]])
View(all_dat_nontypical_indivi[["HG00103"]])
View(all_dat_nontypical_indivi[["HG01366"]])
View(atypical_burden_phenotypes)
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(dplyr)
library(tidyr)
library(readxl)
Alleles <- read_excel("Haplotype Frequencies/SupplementaryTable3_AlleleFrequencies.xlsx")
Alleles = Alleles[,-3]
#Available from literature (PharmGKB)
genes_lit = c("CYP2D6","CYP2B6","CYP2C9","CYP2C19","DPYD","G6PD","SLCO1B1","TPMT")
Alleles = Alleles[Alleles$Gene %in% genes_lit,]
allele_gene = Alleles %>%
group_split(Gene)
names(allele_gene) = unique(Alleles$Gene)
CYP2B6_lit = read_excel("Haplotype Frequencies/CYP2B6_frequency_table.xlsx", sheet = 2)
CYP2B6_and_lit = merge(allele_gene[["CYP2B6"]], CYP2B6_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR")
CYP2B6_and_lit = CYP2B6_and_lit[, col_order]
CYP2B6_and_lit_na_rm = na.omit(CYP2B6_and_lit)
CYP2C9_lit = read_excel("Haplotype Frequencies/CYP2C9_frequency_table.xlsx", sheet = 2)
CYP2C9_and_lit = merge(allele_gene[["CYP2C9"]], CYP2C9_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR","AMR_lit")
CYP2C9_and_lit = CYP2C9_and_lit[, col_order]
CYP2C9_and_lit_na_rm = na.omit(CYP2C9_and_lit)
CYP2C19_lit = read_excel("Haplotype Frequencies/CYP2C19_frequency_table.xlsx", sheet = 2)
CYP2C19_and_lit = merge(allele_gene[["CYP2C19"]], CYP2C19_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR","AMR_lit")
CYP2C19_and_lit = CYP2C19_and_lit[, col_order]
CYP2C19_and_lit_na_rm = na.omit(CYP2C19_and_lit)
CYP2D6_lit = read_excel("Haplotype Frequencies/CYP2D6_frequency_table.xlsx", sheet = 2)
CYP2D6_and_lit = merge(allele_gene[["CYP2D6"]], CYP2D6_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR","AMR_lit")
CYP2D6_and_lit = CYP2D6_and_lit[, col_order]
CYP2D6_and_lit_na_rm = na.omit(CYP2D6_and_lit)
DPYD_lit = read_excel("Haplotype Frequencies/DPYD_frequency_table.xlsx", sheet = 2)
DPYD_and_lit = merge(allele_gene[["DPYD"]], DPYD_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR")
DPYD_and_lit = DPYD_and_lit[, col_order]
DPYD_and_lit_na_rm = na.omit(DPYD_and_lit)
G6PD_lit = read_excel("Haplotype Frequencies/G6PD_frequency_table.xlsx", sheet = 2)
G6PD_and_lit = merge(allele_gene[["G6PD"]], G6PD_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AMR","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit")
G6PD_and_lit = G6PD_and_lit[, col_order]
G6PD_and_lit_na_rm = na.omit(G6PD_and_lit)
#write.xlsx(G6PD_and_lit_na_rm, file = 'G6PD_Redo_20230203_NA_rm.xlsx')
SLCO1B1_lit = read_excel("Haplotype Frequencies/SLCO1B1_frequency_table.xlsx", sheet = 2)
SLCO1B1_and_lit = merge(allele_gene[["SLCO1B1"]], SLCO1B1_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR","AMR_lit")
SLCO1B1_and_lit = SLCO1B1_and_lit[, col_order]
SLCO1B1_and_lit_na_rm = na.omit(SLCO1B1_and_lit)
TPMT_lit = read_excel("Haplotype Frequencies/TPMT_frequency_table.xlsx", sheet = 2)
TPMT_and_lit = merge(allele_gene[["TPMT"]], TPMT_lit, by = "Haplotype")
col_order = c("Haplotype", "Gene","AFR","AFR_lit","EAS","EAS_lit","EUR","EUR_lit","SAS","SAS_lit","AMR")
TPMT_and_lit = TPMT_and_lit[, col_order]
TPMT_and_lit_na_rm = na.omit(TPMT_and_lit)
dataset_names <- list('CYP2B6' = CYP2B6_and_lit, 'CYP2C19' = CYP2C19_and_lit, 'CYP2C9' = CYP2C9_and_lit, 'CYP2D6' = CYP2D6_and_lit, 'DPYD' = DPYD_and_lit, 'G6PD' = G6PD_and_lit, 'SLCO1B1' = SLCO1B1_and_lit, 'TPMT' = TPMT_and_lit)
#write.xlsx(dataset_names, file = 'Haplotype_Frequencies_8_genes_20230124_NA_rm.xlsx')
dataset_names_na <- list('CYP2B6' = CYP2B6_and_lit_na_rm, 'CYP2C19' = CYP2C19_and_lit_na_rm, 'CYP2C9' = CYP2C9_and_lit_na_rm, 'CYP2D6' = CYP2D6_and_lit_na_rm, 'DPYD' = DPYD_and_lit_na_rm, 'G6PD' = G6PD_and_lit_na_rm, 'SLCO1B1' = SLCO1B1_and_lit_na_rm, 'TPMT' = TPMT_and_lit_na_rm)
#write.xlsx(dataset_names_na, file = 'Haplotype_Frequencies_8_genes_20230203_NA_rm.xlsx')
sessionInfo()
View(dataset_names)
View(dataset_names_na)
View(dataset_names_na[["CYP2B6"]])
View(dataset_names[["CYP2B6"]])
View(dataset_names)
View(dataset_names[["CYP2D6"]])
View(dataset_names_na)
View(dataset_names_na[["CYP2D6"]])
knitr::opts_chunk$set(echo = TRUE)
cadd30 = read.csv("SNVs and indels/cadd30-variants.csv")
head(cadd30)
colnames()
colnames(cadd30)
cadd30 = read.csv("SNVs and indels/cadd30-variants.csv") %>%
select("GeneName", "X.Chrom" , "Pos",	"Ref", "Alt", "Type", "Length", "AnnoType", "Consequence", "ConsScore", "ConsDetail", "GeneName", "GeneID", "FeatureID", "PHRED")
library(dplyr)
cadd30 = read.csv("SNVs and indels/cadd30-variants.csv") %>%
select("GeneName", "X.Chrom" , "Pos",	"Ref", "Alt", "Type", "Length", "AnnoType", "Consequence", "ConsScore", "ConsDetail", "GeneName", "GeneID", "FeatureID", "PHRED")
View(cadd30)
count(cadd30$Length)
#add start and end position:
cadd30 %>%
mutate(Start_Pos = Pos - Length (mass, na.rm = TRUE))
#add start and end position:
cadd30 %>%
mutate(Start_Pos = "Pos" - "Length")
#add start and end position:
cadd30 %>%
mutate(Start_Pos = Pos - Length)
#add start and end position:
test = cadd30 %>%
mutate(Start_Pos = Pos - Length)
View(test)
cadd30 = read.csv("SNVs and indels/cadd30-variants.csv") %>%
select("GeneName", "X.Chrom" , "Pos",	"Ref", "Alt", "Type", "Length", "AnnoType", "Consequence", "ConsScore", "ConsDetail", "GeneName", "GeneID", "FeatureID", "PHRED")
#add start and end position:
test = cadd30 %>%
mutate(Start_Pos = Pos) %>%
mutate(End_Pos = Pos + Length)
View(cadd30)
View(test)
#Need to reformat the data for Ensembl VEP (https://grch37.ensembl.org/info/docs/tools/vep/vep_formats.html#input) add start and end position:
cadd30 = cadd30 %>%
mutate(Start_Pos = Pos) %>%
mutate(End_Pos = Pos + Length) %>%
add_column(strand = "+")
library(tidyverse)
#Need to reformat the data for Ensembl VEP (https://grch37.ensembl.org/info/docs/tools/vep/vep_formats.html#input) add start and end position:
cadd30 = cadd30 %>%
mutate(Start_Pos = Pos) %>%
mutate(End_Pos = Pos + Length) %>%
add_column(strand = "+")
#Import CADD30 dataset Supplemental Table 9
cadd30 = read.csv("SNVs and indels/cadd30-variants.csv") %>%
select("GeneName", "X.Chrom" , "Pos",	"Ref", "Alt", "Type", "Length", "AnnoType", "Consequence", "ConsScore", "ConsDetail", "GeneName", "GeneID", "FeatureID", "PHRED")
#Need to reformat the data for Ensembl VEP (https://grch37.ensembl.org/info/docs/tools/vep/vep_formats.html#input) add start and end position:
cadd30 = cadd30 %>%
mutate(Start_Pos = Pos) %>%
mutate(End_Pos = Pos + Length) %>%
add_column(strand = "+")
View(cadd30)
colname(cadd30)
colnames(cadd30)
cadd30 = cadd30 %>%
relocate(vep_format, .before = cadd30$X.Chrom)
knitr::opts_chunk$set(echo = TRUE)
#Libraries
library(readr)
library(dplyr)
library(readxl)
library(xlsx)
library(tidyverse)
#Import CADD30 dataset Supplemental Table 9
cadd30 = read.csv("SNVs and indels/cadd30-variants.csv") %>%
select("GeneName", "X.Chrom" , "Pos",	"Ref", "Alt", "Type", "Length", "AnnoType", "Consequence", "ConsScore", "ConsDetail", "GeneName", "GeneID", "FeatureID", "PHRED")
#Need to reformat the data for Ensembl VEP (https://grch37.ensembl.org/info/docs/tools/vep/vep_formats.html#input) add start and end position:
cadd30 = cadd30 %>%
mutate(Start_Pos = Pos) %>%
mutate(End_Pos = Pos + Length) %>%
add_column(strand = "+")
#Adding the positions, here only duplicating - need to see if I need to add/subtract
start_end_pos = paste(cadd30$Start_Pos, cadd30$End_Pos)
#Creating reference allele/alternative allele
ref_alt = paste(cadd30$Ref,cadd30$Alt, sep = "/")
#combining everything into a column to load into Ensembl VEP
vep_format = paste(cadd30$X.Chrom, start_end_pos, ref_alt, cadd30$strand)
#add columns to df and export to VEP
cadd30$vep_format = vep_format
cadd30 = cadd30 %>%
relocate(vep_format, .before = cadd30$X.Chrom)
View(cadd30)
cadd30 = cadd30 %>%
relocate(vep_format, .before = cadd30$"X.Chrom")
cadd30 = cadd30 %>%
relocate(.before = vep_format, cadd30$X.Chrom)
cadd30 = cadd30 %>%
relocate(vep_format, .before = cadd30$GeneName)
cadd30 = read.csv("SNVs and indels/cadd30-variants.csv") %>%
select("GeneName", "X.Chrom" , "Pos",	"Ref", "Alt", "Type", "Length", "AnnoType", "Consequence", "ConsScore", "ConsDetail", "GeneName", "GeneID", "FeatureID", "PHRED")
#Need to reformat the data for Ensembl VEP (https://grch37.ensembl.org/info/docs/tools/vep/vep_formats.html#input) add start and end position:
cadd30 = cadd30 %>%
mutate(Start_Pos = Pos) %>%
mutate(End_Pos = Pos + Length) %>%
add_column(strand = "+")
#Adding the positions, here only duplicating - need to see if I need to add/subtract
start_end_pos = paste(cadd30$Start_Pos, cadd30$End_Pos)
#Creating reference allele/alternative allele
ref_alt = paste(cadd30$Ref,cadd30$Alt, sep = "/")
#combining everything into a column to load into Ensembl VEP
vep_format = paste(cadd30$X.Chrom, start_end_pos, ref_alt, cadd30$strand)
#add columns to df and export to VEP
cadd30$vep_format = vep_format
View(cadd30)
cadd30 = cadd30 %>%
relocate(vep_format, .before = cadd30$GeneName)
relocate(cadd30, vep_format, .before = GeneName)
cadd30 = relocate(cadd30, vep_format, .before = GeneName)
View(cadd30)
write.xlsx(cadd30, "cadd30_reformat_for_vep_20231029.xlsx")
#Import Dataset
cadd_vep = fread("SNVs and indels/Ensembl_VEP/vep output/VEP_appropriate_format_20230215.txt")
library(fread)
#Import Dataset
cadd_vep = fread("SNVs and indels/Ensembl_VEP/vep output/VEP_appropriate_format_20230215.txt")
#Import Dataset
cadd_vep = fread("SNVs and indels/Ensembl_VEP/vep output/VEP_appropriate_format_20230215.txt")
library(data.table)
#Import Dataset
cadd_vep = fread("SNVs and indels/Ensembl_VEP/vep output/VEP_appropriate_format_20230215.txt")
pathogenic = c("Pathogenic/Likely_pathogenic","Pathogenic","drug_response")
cadd_vep_patho = filter(cadd_vep, clinvar_clnsig %in% pathogenic)
#Potential Variants to keep in mind
unique_patho_variants = unique(cadd_vep_patho$`#Uploaded_variation`)
# [1] "19_38987106_C/T" "19_39014567_C/T" "2_38298167_G/A"  "22_42523528_C/T" "3_14199648_G/A"
# [6] "7_87175304_G/A"  "7_117188877_G/T" "7_117227865_C/T"
cadd_vep_patho = cadd_vep %>%
filter(`#Uploaded_variation` %in% unique_patho_variants)
cadd_vep_patho = cadd_vep_patho %>%
relocate(SYMBOL, .after = `#Uploaded_variation`) %>%
relocate(clinvar_clnsig, .before = SYMBOL) %>%
relocate(Existing_variation, .before = SYMBOL)
# cadd_vep_patho %>%
#   filter(STRAND == 1)
#write.xlsx(cadd_vep_patho, "cadd_vep_pathogenic_20230221.xlsx")
View(cadd_vep_patho)
cadd_vep_patho %>%
filter(STRAND == 1)
View(cadd_vep_patho)
unique(cadd_vep_patho$`#Uploaded_variation`)
indels_vep = fread("SNVs and indels/Ensembl_VEP/vep output/Indels_20230301.txt")
#location: chr:start-end
indels = read_excel("SNVs and indels/Ensembl_VEP/cadd30_indels_20230227.xlsx")
indels$location = paste(indels$`#Chrom`,":",indels$Start_Pos,"-",indels$End_Pos)
indels$location  <- gsub(" ", "", indels$location)
#Working towards filtering
location_vep = unique(indels_vep$Location)
indels_included_vep = subset(indels, location %in% location_vep)
#write.xlsx(indels_included_vep, "indels_vep_included_20230227.xlsx")
View(indels_vep)
indels_vep = fread("SNVs and indels/Ensembl_VEP/vep output/Indels_20230301.txt")
#location: chr:start-end
indels = read_excel("SNVs and indels/Ensembl_VEP/vep output/cadd30_indels_20230227.xlsx")
